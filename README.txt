    Требование для работы NODE.js, MongoDB, Postman
#
    1.Запустите MongoDB, инструкции доступны на странице установки для каждой ОС по адресу https://docs.mongodb.com/manual/administration/install-community/
    2.Загрузите или клонируйте исходный код проекта
    3.Установите все необходимые пакеты npm, запустив npm installили npm iиз командной строки в корневой папке проекта (где находится package.json).
    4.Запустите api, запустив npm start(или npm run start:devчтобы начать с nodemon) из командной строки в корневой папке проекта, вы должны увидеть сообщение Server listening on port 3000, 
    5.Следуйте приведенным ниже инструкциям, чтобы протестировать Postman
#

    Как аутентифицировать пользователя с помощью Postman

    Чтобы аутентифицировать пользователя, чтобы получить токен JWT и обновить токен, выполните следующие действия:
#    
    1.Откройте новую вкладку запроса, нажав кнопку «плюс» (+) в конце вкладок.
    2.Измените метод HTTP-запроса на «POST» с помощью раскрывающегося списка слева от поля ввода URL-адреса.
    3.В поле URL введите адрес для маршрута аутентификации вашего локального API - http://localhost:3000/users/authenticate.
    4.Выберите вкладку «Body» под полем URL, измените переключатель типа тела на «raw» и измените раскрывающийся селектор формата на «JSON».
    6.Введите объект JSON, содержащий тестовое имя пользователя и пароль, в текстовое поле «Body»:

    {
        "username": "test",
        "password": "test"
    }

    7.Нажмите кнопку «Отправить», вы должны получить ответ «200 OK» с данными пользователя, включая токен JWT в теле ответа и токен обновления в файлах cookie 
    ответа.
#

    Как обновить токен с помощью Postman
#
    Этот шаг может быть выполнен только после указанного выше шага аутентификации, поскольку требуется действующий файл cookie токена обновления.

    Чтобы использовать файл cookie токена обновления для получения нового токена JWT и нового токена обновления, выполните следующие действия:

    1.Откройте новую вкладку запроса, нажав кнопку «плюс» (+) в конце вкладок.
    2.Измените метод HTTP-запроса на «POST» с помощью раскрывающегося списка слева от поля ввода URL-адреса.
    3.В поле URL введите адрес для маршрута токена обновления вашего локального API - http://localhost:3000/users/refresh-token.
    4.Нажмите кнопку «Отправить», вы должны получить ответ «200 OK» с данными пользователя, включая токен JWT в теле ответа и токен обновления в файлах cookie
    ответа. Сделайте копию значения токена JWT, потому что мы будем использовать его на следующих шагах для выполнения аутентифицированных запросов.
#

    Как сделать запрос с аутентификацией для получения всех пользователей
#
    Чтобы сделать запрос с проверкой подлинности, чтобы получить всех пользователей с токеном JWT из предыдущего шага, выполните следующие действия:

    1.Откройте новую вкладку запроса, нажав кнопку «плюс» (+) в конце вкладок.
    2.Измените метод HTTP-запроса на «GET» с помощью раскрывающегося списка слева от поля ввода URL-адреса.
    3.В поле URL введите адрес пользовательского маршрута вашего локального API - http://localhost:3000/users.
    4.Выберите вкладку «Авторизация» под полем URL-адреса, измените тип на «Bearer Token» в раскрывающемся списке типов и вставьте JWT-токен из предыдущего шага в 
    поле «Token».
    5.Нажмите кнопку «Отправить», вы должны получить ответ «200 OK», содержащий массив JSON со всеми пользовательскими записями в системе (только один тестовый 
    пользователь в примере).
#

    Как получить все токены обновления пользователя
#
    Чтобы получить все токены обновления для пользователя, включая активные и отозванные токены, выполните следующие действия:

    1.Откройте новую вкладку запроса, нажав кнопку «плюс» (+) в конце вкладок.
    2.Измените метод HTTP-запроса на «GET» с помощью раскрывающегося списка слева от поля ввода URL-адреса.
    3.В поле URL введите адрес пользовательского маршрута вашего локального API - http://localhost:3000/users/1/refresh-tokens.
    4.Выберите вкладку «Авторизация» под полем URL, измените тип на «Bearer Token» в раскрывающемся списке типов и вставьте JWT-токен из предыдущего шага
    аутентификации (или обновления токена) в поле «Token».
    5.Нажмите кнопку «Отправить», вы должны получить ответ «200 OK», содержащий массив JSON со всеми токенами обновления тестового пользователя. Сделайте копию
    последнего значения токена (активного токена), потому что мы будем использовать его на следующем шаге, чтобы отозвать токен.
#

    Как отозвать токен с помощью Postman
#
    Чтобы отозвать токен обновления, чтобы его больше нельзя было использовать для создания токенов JWT, выполните следующие действия:

    1.Откройте новую вкладку запроса, нажав кнопку «плюс» (+) в конце вкладок.
    2.Измените метод HTTP-запроса на «POST» с помощью раскрывающегося списка слева от поля ввода URL-адреса.
    3.В поле URL введите адрес для маршрута аутентификации вашего локального API - http://localhost:3000/users/revoke-token.
    4.Выберите вкладку «Авторизация» под полем URL, измените тип на «Bearer Token» в раскрывающемся списке типов и вставьте JWT-токен из предыдущего шага 
    аутентификации (или обновления токена) в поле «Token».
    5.Выберите вкладку «Body» под полем URL, измените переключатель типа тела на «raw» и измените раскрывающийся селектор формата на «JSON».
    6.Введите объект JSON, содержащий активный токен обновления из предыдущего шага, в текстовое поле «Body», например: 
	{
	    "token": "Введите активный REFRESH TOKEN сюда"
	}

    7.Нажмите кнопку «Отправить», вы должны получить ответ «200 OK» с сообщением Token revoked.